import sqlite3

def create_db():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS products
                 (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, price REAL)''')
    conn.commit()
    conn.close()

create_db()

import tkinter as tk
from tkinter import messagebox

def main():
    root = tk.Tk()
    root.title("Inventory Management System")

    # Add your GUI components here

    root.mainloop()

if __name__ == "__main__":
    main()

def add_product(name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
    conn.commit()
    conn.close()

def add_product_gui():
    def save_product():
        name = name_entry.get()
        quantity = int(quantity_entry.get())
        price = float(price_entry.get())
        add_product(name, quantity, price)
        messagebox.showinfo("Success", "Product added successfully")
        add_window.destroy()

    add_window = tk.Toplevel()
    add_window.title("Add Product")

    tk.Label(add_window, text="Name").grid(row=0, column=0)
    tk.Label(add_window, text="Quantity").grid(row=1, column=0)
    tk.Label(add_window, text="Price").grid(row=2, column=0)

    name_entry = tk.Entry(add_window)
    quantity_entry = tk.Entry(add_window)
    price_entry = tk.Entry(add_window)

    name_entry.grid(row=0, column=1)
    quantity_entry.grid(row=1, column=1)
    price_entry.grid(row=2, column=1)

    tk.Button(add_window, text="Save", command=save_product).grid(row=3, columnspan=2)

root = tk.Tk()
tk.Button(root, text="Add Product", command=add_product_gui).pack()
root.mainloop()

def edit_product(id, name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("UPDATE products SET name = ?, quantity = ?, price = ? WHERE id = ?", (name, quantity, price, id))
    conn.commit()
    conn.close()

def delete_product(id):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("DELETE FROM products WHERE id = ?", (id,))
    conn.commit()
    conn.close()

def low_stock_alert(threshold):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products WHERE quantity < ?", (threshold,))
    low_stock_products = c.fetchall()
    conn.close()
    return low_stock_products

def sales_summary():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products")
    products = c.fetchall()
    conn.close()
    return products

def login(username, password):
    # Placeholder function for authentication
    return username == "admin" and password == "password"

def login_gui():
    def authenticate():
        username = username_entry.get()
        password = password_entry.get()
        if login(username, password):
            main()
            login_window.destroy()
        else:
            messagebox.showerror("Error", "Invalid credentials")

    login_window = tk.Tk()
    login_window.title("Login")

    tk.Label(login_window, text="Username").grid(row=0, column=0)
    tk.Label(login_window, text="Password").grid(row=1, column=0)

    username_entry = tk.Entry(login_window)
    password_entry = tk.Entry(login_window, show="*")

    username_entry.grid(row=0, column=1)
    password_entry.grid(row=1, column=1)

    tk.Button(login_window, text="Login", command=authenticate).grid(row=2, columnspan=2)

    login_window.mainloop()

login_gui()

import tkinter as tk
from tkinter import messagebox
import sqlite3

def create_db():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS products
                 (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, price REAL)''')
    conn.commit()
    conn.close()

def add_product(name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
    conn.commit()
    conn.close()

def edit_product(id, name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("UPDATE products SET name = ?, quantity = ?, price = ? WHERE id = ?", (name, quantity, price, id))
    conn.commit()
    conn.close()

def delete_product(id):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("DELETE FROM products WHERE id = ?", (id,))
    conn.commit()
    conn.close()

def low_stock_alert(threshold):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products WHERE quantity < ?", (threshold,))
    low_stock_products = c.fetchall()
    conn.close()
    return low_stock_products

def sales_summary():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products")
    products = c.fetchall()
    conn.close()
    return products

def login(username, password):
    return username == "admin" and password == "password"

def add_product_gui():
    def save_product():
        name = name_entry.get()
        quantity = int(quantity_entry.get())
        price = float(price_entry.get())
        add_product(name, quantity, price)
        messagebox.showinfo("Success", "Product added successfully")
        add_window.destroy()

    add_window = tk.Toplevel()
    add_window.title("Add Product")

    tk.Label(add_window, text="Name").grid(row=0, column=0)
    tk.Label(add_window, text="Quantity").grid(row=1, column=0)
    tk.Label(add_window, text="Price").grid(row=2, column=0)

    name_entry = tk.Entry(add_window)
    quantity_entry = tk.Entry(add_window)
    price_entry = tk.Entry(add_window)

    name_entry.grid(row=0, column=1)
    quantity_entry.grid(row=1, column=1)
    price_entry.grid(row=2, column=1)

    tk.Button(add_window, text="Save", command=save_product).grid(row=3, columnspan=2)

def main():
    root = tk.Tk()
    root.title("Inventory Management System")

    tk.Button(root, text="Add Product", command=add_product_gui).pack()

    root.mainloop()

def login_gui():
    def authenticate():
        username = username_entry.get()
        password = password_entry.get()
        if login(username, password):
            main()
            login_window.destroy()
        else:
            messagebox.showerror("Error", "Invalid credentials")

    login_window = tk.Tk()
    login_window.title("Login")

    tk.Label(login_window, text="Username").grid(row=0, column=0)
    tk.Label(login_window, text="Password").grid(row=1, column=0)

    username_entry = tk.Entry(login_window)
    password_entry = tk.Entry(login_window, show="*")

    username_entry.grid(row=0, column=1)
    password_entry.grid(row=1, column=1)

    tk.Button(login_window, text="Login", command=authenticate).grid(row=2, columnspan=2)

    login_window.mainloop()

if __name__ == "__main__":
    create_db()
    login_gui()
